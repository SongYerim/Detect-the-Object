{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a81ce507-3715-4194-bd3b-5d9760b6743f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import os\n",
    "import yaml\n",
    "import shutil\n",
    "from pathlib import Path\n",
    "import base64\n",
    "\n",
    "import streamlit as st\n",
    "\n",
    "# 사이드바에 제목 추가\n",
    "st.sidebar.title(\"Help\")\n",
    "\n",
    "def sidebar_image(image_path):\n",
    "    with open(image_path, \"rb\") as img_file:\n",
    "        img_data = img_file.read()\n",
    "    encoded_img = base64.b64encode(img_data).decode()\n",
    "    img_html = f'<img src=\"data:image/png;base64,{encoded_img}\" style=\"width:100%;\">'\n",
    "    st.sidebar.markdown(img_html, unsafe_allow_html=True)\n",
    "    \n",
    "st.sidebar.markdown(\"\"\"\n",
    "### Tutorial \n",
    "**[Training the model]**\n",
    "1. **Before training the model**, create a dataset by following the instructions in the Before training the Model link.\n",
    "2. **train_data** should consist of two folders: `images` and `labels`. \n",
    "   Each folder consists of two subfolders: `train` and `val`.\n",
    "   Upload each folder by dragging or dropping it to the appropriate location.\n",
    "\"\"\")\n",
    "sidebar_image(\"../yolov5/folders.png\")\n",
    "st.sidebar.markdown(\"\"\"\n",
    "3. **Validation** should be performed on a separate validation set.\n",
    "    (Usually about 5% of the dataset is used for validation.)\n",
    "4. Enter the number of labels used when creating the dataset in the **Enter number of classes (ex: 5)** field.\n",
    "5. Enter the names of the labels you specified when creating the dataset in the **Enter class names (comma separated, ex: L1, L2, L3, L4, L5)** field.\n",
    "6. If you performed steps 3 and 4, click the **Save Configuration** button.\n",
    "If the phrase “Configuration saved to corning.yaml” appears below the button, it is successful.\n",
    "7. Select the number of times to train the model repeatedly in the **Enter number of epochs** field.\n",
    "8. The **Train the Model** button, which allows you to train the model, is activated only after step 5 is performed.\n",
    "\"\"\")\n",
    "st.sidebar.markdown(\"\"\"\n",
    "**[Detect Image]**\n",
    "1. To evaluate the performance of your model, you need to perform tests (corresponding to steps 1-7) on the test set.\n",
    "2. Upload the image you want to test by dragging or dropping it to the appropriate location.\n",
    "3. Click the Run YOLO Model button to run image detection.\n",
    "4. **Detection** refers to the label name of the detected image.\n",
    " **Coordinates** refer to the positions of the four corners of the square that appear in the detected image.\n",
    " **Accuracy** refers to prediction accuracy.\n",
    "\"\"\")\n",
    "\n",
    "# Function to set background image\n",
    "def set_background(image_path):\n",
    "    \n",
    "    with open(image_path, \"rb\") as f:\n",
    "        data = f.read()\n",
    "    encoded_image = base64.b64encode(data).decode()\n",
    "    background_image = f\"\"\"\n",
    "    <style>\n",
    "    .stApp {{\n",
    "        background-image: url(data:image/png;base64,{encoded_image});\n",
    "        background-size: cover;\n",
    "        background-repeat: no-repeat;\n",
    "        background-attachment: fixed;\n",
    "    }}\n",
    "    .title-container {{\n",
    "        margin-top: 20px;\n",
    "        margin-bottom: 10px;\n",
    "    }}\n",
    "    .title-container h1 {{\n",
    "        font-size: 80px;  /* 글씨 크기 키우기 */\n",
    "        color: white;  /* 글씨 색상 변경 */\n",
    "    }}\n",
    "    .column-container {{\n",
    "        display: flex;\n",
    "        justify-content: space-between;\n",
    "        gap: 80px;\n",
    "    }}\n",
    "    .sidebar .sidebar-content {{\n",
    "        background-color: #E9D8F6;\n",
    "    }}\n",
    "    .file-upload-container {{\n",
    "        display: flex;\n",
    "        justify-content: space-between;\n",
    "        gap: 10px;\n",
    "    }}\n",
    "    </style>\n",
    "    \"\"\"\n",
    "    st.markdown(background_image, unsafe_allow_html=True)\n",
    "\n",
    "# Function to display HTML file content\n",
    "def display_html(file_path):\n",
    "    with open(file_path, 'r', encoding='utf-8') as file:\n",
    "        html_content = file.read()\n",
    "    st.markdown(html_content, unsafe_allow_html=True)\n",
    "\n",
    "# Path to the background image\n",
    "background_image_path = \"../yolov5/background_design.png\"\n",
    "\n",
    "# Set the background image\n",
    "set_background(background_image_path)\n",
    "\n",
    "# Add CSS classes to the title and columns\n",
    "st.markdown('<div class=\"title-container\">', unsafe_allow_html=True)\n",
    "st.title(\"Detect the Object !\")\n",
    "st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "# Add vertical space between title and content\n",
    "st.markdown(\"<br>\", unsafe_allow_html=True)\n",
    "\n",
    "# Create two columns with a gap\n",
    "col1, col2, col3 = st.columns([4.8, 0.2, 4.8])\n",
    "\n",
    "with col1:\n",
    "    st.header(\"Training the model\")\n",
    "\n",
    "    # External link to the labeling tool\n",
    "    st.markdown(\"[Before training the Model](https://hospitable-arithmetic-3f5.notion.site/Before-training-the-Model-c09b1e13ae69450e8490941168bf6978?pvs=4)\")\n",
    "\n",
    "    # Upload train images and val images\n",
    "    st.markdown('<div class=\"file-upload-container\">', unsafe_allow_html=True)\n",
    "    train_images = st.file_uploader(\"Upload train images\", accept_multiple_files=True, type=['jpg', 'jpeg', 'png'])\n",
    "    val_images = st.file_uploader(\"Upload validation images\", accept_multiple_files=True, type=['jpg', 'jpeg', 'png'])\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "    # Upload train labels and val labels\n",
    "    st.markdown('<div class=\"file-upload-container\">', unsafe_allow_html=True)\n",
    "    train_labels = st.file_uploader(\"Upload train labels\", accept_multiple_files=True, type=['txt'])\n",
    "    val_labels = st.file_uploader(\"Upload validation labels\", accept_multiple_files=True, type=['txt'])\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "    # Number of classes input\n",
    "    nc = st.number_input(\"Enter number of classes (ex: 5)\", min_value=1) \n",
    "\n",
    "    # Class names input with placeholder guidance in the label\n",
    "    class_names = st.text_area(\"Enter class names (comma separated, ex: L1, L2, L3, L4, L5)\", value=\"\")\n",
    "\n",
    "    # Initialize session state for configuration saved\n",
    "    if \"config_saved\" not in st.session_state:\n",
    "        st.session_state.config_saved = False\n",
    "\n",
    "    # Save the .yaml configuration file\n",
    "    def save_yaml(nc, class_names):\n",
    "        data = {\n",
    "            'path': '../train_data',\n",
    "            'train': 'images/train',\n",
    "            'val': 'images/val',\n",
    "            'test': '',\n",
    "            'nc': nc,\n",
    "            'names': class_names.split(',')\n",
    "        }\n",
    "        with open(\"/home/team04/yolov5/data/corning.yaml\", 'w') as outfile:\n",
    "            yaml.dump(data, outfile, default_flow_style=False, sort_keys=False)\n",
    "\n",
    "    # Save configuration button\n",
    "    if st.button('Save Configuration'):\n",
    "        save_yaml(nc, class_names)\n",
    "        st.success(\"Configuration saved to corning.yaml\")\n",
    "        st.session_state.config_saved = True\n",
    "\n",
    "    # Epochs input\n",
    "    epochs = st.number_input(\"Enter number of epochs\", min_value=1, value=3)\n",
    "\n",
    "    # Training button\n",
    "    if not st.session_state.config_saved:\n",
    "        st.warning(\"Please save the configuration file before training the model.\")\n",
    "    else:\n",
    "        if st.button('Train YOLO Model'):\n",
    "            if train_images and train_labels and val_images and val_labels:\n",
    "                base_dir = \"/home/team04/train_data/\"\n",
    "                images_dir = os.path.join(base_dir, \"images\")\n",
    "                labels_dir = os.path.join(base_dir, \"labels\")\n",
    "\n",
    "                # 기존 train_data 폴더의 내용 삭제\n",
    "                if os.path.exists(images_dir):\n",
    "                    shutil.rmtree(images_dir)\n",
    "                if os.path.exists(labels_dir):\n",
    "                    shutil.rmtree(labels_dir)\n",
    "\n",
    "                # 새로운 train_data 폴더 생성\n",
    "                for dir_path in [images_dir, labels_dir]:\n",
    "                    os.makedirs(os.path.join(dir_path, \"train\"), exist_ok=True)\n",
    "                    os.makedirs(os.path.join(dir_path, \"val\"), exist_ok=True)\n",
    "\n",
    "                for img in train_images:\n",
    "                    img_path = os.path.join(images_dir, \"train\", img.name)\n",
    "                    with open(img_path, \"wb\") as f:\n",
    "                        f.write(img.getbuffer())\n",
    "\n",
    "                for label in train_labels:\n",
    "                    label_path = os.path.join(labels_dir, \"train\", label.name)\n",
    "                    with open(label_path, \"wb\") as f:\n",
    "                        f.write(label.getbuffer())\n",
    "\n",
    "                for img in val_images:\n",
    "                    img_path = os.path.join(images_dir, \"val\", img.name)\n",
    "                    with open(img_path, \"wb\") as f:\n",
    "                        f.write(img.getbuffer())\n",
    "\n",
    "                for label in val_labels:\n",
    "                    label_path = os.path.join(labels_dir, \"val\", label.name)\n",
    "                    with open(label_path, \"wb\") as f:\n",
    "                        f.write(label.getbuffer())\n",
    "\n",
    "                # Save the YAML configuration\n",
    "                save_yaml(nc, class_names)\n",
    "                \n",
    "                # Run the training command\n",
    "                os.system(f\"python /home/team04/yolov5/train.py --img 640 --batch 16 --epochs {epochs} --data /home/team04/yolov5/data/corning.yaml --weights yolov5s.pt --cache\")\n",
    "                st.success(f\"Training completed for {epochs} epochs.\")\n",
    "            else:\n",
    "                st.error(\"Please upload all required images and label files.\")\n",
    "\n",
    "# Function to get the latest exp directory in runs/train\n",
    "def get_latest_exp_dir(base_path=\"/home/team04/yolov5/runs/train\"):\n",
    "    exp_dirs = [d for d in Path(base_path).iterdir() if d.is_dir() and d.name.startswith(\"exp\")]\n",
    "    latest_exp_dir = max(exp_dirs, key=lambda d: d.stat().st_mtime, default=None)\n",
    "    return latest_exp_dir\n",
    "\n",
    "with col3:\n",
    "    st.header(\"Detect Image\")\n",
    "    \n",
    "    st.markdown('<div class=\"column-container\">', unsafe_allow_html=True)\n",
    "    \n",
    "    st.write('Find out where is the object')\n",
    "    up_image = st.file_uploader(\"Choose a image file for classification\")\n",
    "    if up_image is not None:\n",
    "        st.image(up_image)\n",
    "        with open(\"/home/team04/yolov5/image.jpeg\",\"wb\") as f:\n",
    "            f.write(up_image.getbuffer())\n",
    "\n",
    "    st.write('Classification using YOLO')\n",
    "    if st.button('Run YOLO Model'):\n",
    "        if os.path.exists(\"/home/team04/yolov5/exp/\"):\n",
    "            shutil.rmtree(\"/home/team04/yolov5/exp/\")\n",
    "        \n",
    "        latest_exp_dir = get_latest_exp_dir()\n",
    "        if latest_exp_dir:\n",
    "            weight_path = latest_exp_dir / \"weights/best.pt\"\n",
    "            # st.write(f\"Using weight path: {weight_path}\")  # Display the weight path\n",
    "            os.system(f\"python /home/team04/yolov5/detect.py --weight {weight_path} --source /home/team04/yolov5/image.jpeg --project /home/team04/yolov5/ --save-txt --save-conf\")\n",
    "        \n",
    "            latest_exp_dir = get_latest_exp_dir(base_path=\"/home/team04/yolov5\")\n",
    "            if latest_exp_dir and (latest_exp_dir / \"image.jpeg\").exists():\n",
    "                st.image(str(latest_exp_dir / \"image.jpeg\"))\n",
    "                label_file_path = latest_exp_dir / \"labels/image.txt\"\n",
    "                if label_file_path.exists():\n",
    "                    with open(label_file_path, 'r') as f:\n",
    "                        lines = f.readlines()\n",
    "                        label_dict = {i: name for i, name in enumerate(class_names.split(','))}\n",
    "                        results = []\n",
    "                        for line in lines:\n",
    "                            parts = line.strip().split()\n",
    "                            label_index = int(parts[0])\n",
    "                            label = label_dict.get(label_index, \"Unknown\")\n",
    "                            confidence = float(parts[-1])\n",
    "                            bbox = \" \".join(parts[1:-1])\n",
    "                            results.append({\n",
    "                                \"label\": label,\n",
    "                                \"coordinates\": bbox,\n",
    "                                \"confidence\": confidence\n",
    "                            })\n",
    "                        for result in results:\n",
    "                            st.write(f\"Detection: {result['label']}\")\n",
    "                            st.write(f\"Coordinates: {result['coordinates']}\")\n",
    "                            st.write(f\"Accuracy: {result['confidence']:.2f}\")\n",
    "\n",
    "                else:\n",
    "                    st.error(\"Label file not found. Please check the YOLOv5 output.\")\n",
    "            else:\n",
    "                st.error(\"Detection image not found. Please check the YOLOv5 output.\")\n",
    "        else:\n",
    "            st.error(\"No trained model found. Please check the YOLOv5 training output.\")\n",
    "    st.markdown('</div>', unsafe_allow_html=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
